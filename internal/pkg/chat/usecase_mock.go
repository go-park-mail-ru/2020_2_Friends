// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/friends/internal/pkg/chat (interfaces: Usecase)

// Package chat is a generated GoMock package.
package chat

import (
	models "github.com/friends/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUsecase is a mock of Usecase interface
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// GetChat mocks base method
func (m *MockUsecase) GetChat(arg0 int, arg1 string) ([]models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChat", arg0, arg1)
	ret0, _ := ret[0].([]models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChat indicates an expected call of GetChat
func (mr *MockUsecaseMockRecorder) GetChat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChat", reflect.TypeOf((*MockUsecase)(nil).GetChat), arg0, arg1)
}

// GetVendorChats mocks base method
func (m *MockUsecase) GetVendorChats(arg0 string) ([]models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVendorChats", arg0)
	ret0, _ := ret[0].([]models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVendorChats indicates an expected call of GetVendorChats
func (mr *MockUsecaseMockRecorder) GetVendorChats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVendorChats", reflect.TypeOf((*MockUsecase)(nil).GetVendorChats), arg0)
}

// Save mocks base method
func (m *MockUsecase) Save(arg0 models.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockUsecaseMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUsecase)(nil).Save), arg0)
}
