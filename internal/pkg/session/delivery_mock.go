// Code generated by MockGen. DO NOT EDIT.
// Source: ./session.pb.go

// Package session is a generated GoMock package.
package session

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockSessionWorkerClient is a mock of SessionWorkerClient interface
type MockSessionWorkerClient struct {
	ctrl     *gomock.Controller
	recorder *MockSessionWorkerClientMockRecorder
}

// MockSessionWorkerClientMockRecorder is the mock recorder for MockSessionWorkerClient
type MockSessionWorkerClientMockRecorder struct {
	mock *MockSessionWorkerClient
}

// NewMockSessionWorkerClient creates a new mock instance
func NewMockSessionWorkerClient(ctrl *gomock.Controller) *MockSessionWorkerClient {
	mock := &MockSessionWorkerClient{ctrl: ctrl}
	mock.recorder = &MockSessionWorkerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionWorkerClient) EXPECT() *MockSessionWorkerClientMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockSessionWorkerClient) Create(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*SessionName, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*SessionName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockSessionWorkerClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionWorkerClient)(nil).Create), varargs...)
}

// Check mocks base method
func (m *MockSessionWorkerClient) Check(ctx context.Context, in *SessionName, opts ...grpc.CallOption) (*UserID, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Check", varargs...)
	ret0, _ := ret[0].(*UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check
func (mr *MockSessionWorkerClientMockRecorder) Check(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockSessionWorkerClient)(nil).Check), varargs...)
}

// Delete mocks base method
func (m *MockSessionWorkerClient) Delete(ctx context.Context, in *SessionName, opts ...grpc.CallOption) (*DeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockSessionWorkerClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSessionWorkerClient)(nil).Delete), varargs...)
}

// MockSessionWorkerServer is a mock of SessionWorkerServer interface
type MockSessionWorkerServer struct {
	ctrl     *gomock.Controller
	recorder *MockSessionWorkerServerMockRecorder
}

// MockSessionWorkerServerMockRecorder is the mock recorder for MockSessionWorkerServer
type MockSessionWorkerServerMockRecorder struct {
	mock *MockSessionWorkerServer
}

// NewMockSessionWorkerServer creates a new mock instance
func NewMockSessionWorkerServer(ctrl *gomock.Controller) *MockSessionWorkerServer {
	mock := &MockSessionWorkerServer{ctrl: ctrl}
	mock.recorder = &MockSessionWorkerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionWorkerServer) EXPECT() *MockSessionWorkerServerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockSessionWorkerServer) Create(arg0 context.Context, arg1 *UserID) (*SessionName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*SessionName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockSessionWorkerServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionWorkerServer)(nil).Create), arg0, arg1)
}

// Check mocks base method
func (m *MockSessionWorkerServer) Check(arg0 context.Context, arg1 *SessionName) (*UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0, arg1)
	ret0, _ := ret[0].(*UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check
func (mr *MockSessionWorkerServerMockRecorder) Check(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockSessionWorkerServer)(nil).Check), arg0, arg1)
}

// Delete mocks base method
func (m *MockSessionWorkerServer) Delete(arg0 context.Context, arg1 *SessionName) (*DeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockSessionWorkerServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSessionWorkerServer)(nil).Delete), arg0, arg1)
}
