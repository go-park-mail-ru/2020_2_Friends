// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/friends/internal/pkg/order (interfaces: Usecase)

// Package order is a generated GoMock package.
package order

import (
	models "github.com/friends/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUsecase is a mock of Usecase interface
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// AddOrder mocks base method
func (m *MockUsecase) AddOrder(arg0 string, arg1 models.OrderRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrder indicates an expected call of AddOrder
func (mr *MockUsecaseMockRecorder) AddOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockUsecase)(nil).AddOrder), arg0, arg1)
}

// GetOrder mocks base method
func (m *MockUsecase) GetOrder(arg0, arg1 string) (models.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0, arg1)
	ret0, _ := ret[0].(models.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder
func (mr *MockUsecaseMockRecorder) GetOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockUsecase)(nil).GetOrder), arg0, arg1)
}

// GetUserIDFromOrder mocks base method
func (m *MockUsecase) GetUserIDFromOrder(arg0 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDFromOrder", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDFromOrder indicates an expected call of GetUserIDFromOrder
func (mr *MockUsecaseMockRecorder) GetUserIDFromOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDFromOrder", reflect.TypeOf((*MockUsecase)(nil).GetUserIDFromOrder), arg0)
}

// GetUserOrders mocks base method
func (m *MockUsecase) GetUserOrders(arg0 string) ([]models.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", arg0)
	ret0, _ := ret[0].([]models.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders
func (mr *MockUsecaseMockRecorder) GetUserOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockUsecase)(nil).GetUserOrders), arg0)
}

// GetVendorIDFromOrder mocks base method
func (m *MockUsecase) GetVendorIDFromOrder(arg0 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVendorIDFromOrder", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVendorIDFromOrder indicates an expected call of GetVendorIDFromOrder
func (mr *MockUsecaseMockRecorder) GetVendorIDFromOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVendorIDFromOrder", reflect.TypeOf((*MockUsecase)(nil).GetVendorIDFromOrder), arg0)
}

// GetVendorOrders mocks base method
func (m *MockUsecase) GetVendorOrders(arg0 string) (models.VendorOrdersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVendorOrders", arg0)
	ret0, _ := ret[0].(models.VendorOrdersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVendorOrders indicates an expected call of GetVendorOrders
func (mr *MockUsecaseMockRecorder) GetVendorOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVendorOrders", reflect.TypeOf((*MockUsecase)(nil).GetVendorOrders), arg0)
}

// UpdateOrderStatus mocks base method
func (m *MockUsecase) UpdateOrderStatus(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus
func (mr *MockUsecaseMockRecorder) UpdateOrderStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockUsecase)(nil).UpdateOrderStatus), arg0, arg1)
}
