// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/friends/internal/pkg/vendors (interfaces: Usecase)

// Package vendors is a generated GoMock package.
package vendors

import (
	models "github.com/friends/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	multipart "mime/multipart"
	reflect "reflect"
)

// MockUsecase is a mock of Usecase interface
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// AddProduct mocks base method
func (m *MockUsecase) AddProduct(arg0 models.Product) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct
func (mr *MockUsecaseMockRecorder) AddProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockUsecase)(nil).AddProduct), arg0)
}

// CheckVendorOwner mocks base method
func (m *MockUsecase) CheckVendorOwner(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckVendorOwner", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckVendorOwner indicates an expected call of CheckVendorOwner
func (mr *MockUsecaseMockRecorder) CheckVendorOwner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckVendorOwner", reflect.TypeOf((*MockUsecase)(nil).CheckVendorOwner), arg0, arg1)
}

// Create mocks base method
func (m *MockUsecase) Create(arg0 string, arg1 models.Vendor) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUsecaseMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsecase)(nil).Create), arg0, arg1)
}

// DeleteProduct mocks base method
func (m *MockUsecase) DeleteProduct(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct
func (mr *MockUsecaseMockRecorder) DeleteProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockUsecase)(nil).DeleteProduct), arg0)
}

// Get mocks base method
func (m *MockUsecase) Get(arg0 int) (models.Vendor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(models.Vendor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockUsecaseMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUsecase)(nil).Get), arg0)
}

// GetAll mocks base method
func (m *MockUsecase) GetAll() ([]models.Vendor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.Vendor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockUsecaseMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUsecase)(nil).GetAll))
}

// GetPartnerShops mocks base method
func (m *MockUsecase) GetPartnerShops(arg0 string) ([]models.Vendor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartnerShops", arg0)
	ret0, _ := ret[0].([]models.Vendor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartnerShops indicates an expected call of GetPartnerShops
func (mr *MockUsecaseMockRecorder) GetPartnerShops(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartnerShops", reflect.TypeOf((*MockUsecase)(nil).GetPartnerShops), arg0)
}

// GetVendorIDFromProduct mocks base method
func (m *MockUsecase) GetVendorIDFromProduct(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVendorIDFromProduct", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVendorIDFromProduct indicates an expected call of GetVendorIDFromProduct
func (mr *MockUsecaseMockRecorder) GetVendorIDFromProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVendorIDFromProduct", reflect.TypeOf((*MockUsecase)(nil).GetVendorIDFromProduct), arg0)
}

// GetVendorOwner mocks base method
func (m *MockUsecase) GetVendorOwner(arg0 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVendorOwner", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVendorOwner indicates an expected call of GetVendorOwner
func (mr *MockUsecaseMockRecorder) GetVendorOwner(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVendorOwner", reflect.TypeOf((*MockUsecase)(nil).GetVendorOwner), arg0)
}

// Update mocks base method
func (m *MockUsecase) Update(arg0 models.Vendor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUsecaseMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUsecase)(nil).Update), arg0)
}

// UpdateProduct mocks base method
func (m *MockUsecase) UpdateProduct(arg0 models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct
func (mr *MockUsecaseMockRecorder) UpdateProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockUsecase)(nil).UpdateProduct), arg0)
}

// UpdateProductPicture mocks base method
func (m *MockUsecase) UpdateProductPicture(arg0 string, arg1 multipart.File) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductPicture", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductPicture indicates an expected call of UpdateProductPicture
func (mr *MockUsecaseMockRecorder) UpdateProductPicture(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductPicture", reflect.TypeOf((*MockUsecase)(nil).UpdateProductPicture), arg0, arg1)
}

// UpdateVendorPicture mocks base method
func (m *MockUsecase) UpdateVendorPicture(arg0 string, arg1 multipart.File) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVendorPicture", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVendorPicture indicates an expected call of UpdateVendorPicture
func (mr *MockUsecaseMockRecorder) UpdateVendorPicture(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVendorPicture", reflect.TypeOf((*MockUsecase)(nil).UpdateVendorPicture), arg0, arg1)
}
