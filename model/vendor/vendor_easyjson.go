// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package vendor

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson69b49e86DecodeGithubComFriendsModelVendor(in *jlexer.Lexer, out *Vendor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "storeName":
			out.Name = string(in.String())
		case "products":
			if in.IsNull() {
				in.Skip()
				out.Products = nil
			} else {
				in.Delim('[')
				if out.Products == nil {
					if !in.IsDelim(']') {
						out.Products = make([]Product, 0, 1)
					} else {
						out.Products = []Product{}
					}
				} else {
					out.Products = (out.Products)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Product
					(v1).UnmarshalEasyJSON(in)
					out.Products = append(out.Products, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson69b49e86EncodeGithubComFriendsModelVendor(out *jwriter.Writer, in Vendor) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"storeName\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"products\":"
		out.RawString(prefix)
		if in.Products == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Products {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Vendor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson69b49e86EncodeGithubComFriendsModelVendor(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Vendor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson69b49e86EncodeGithubComFriendsModelVendor(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Vendor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson69b49e86DecodeGithubComFriendsModelVendor(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Vendor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson69b49e86DecodeGithubComFriendsModelVendor(l, v)
}
func easyjson69b49e86DecodeGithubComFriendsModelVendor1(in *jlexer.Lexer, out *Product) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "picturePath":
			out.PicturePath = string(in.String())
		case "foodName":
			out.Name = string(in.String())
		case "foodPrice":
			out.Price = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson69b49e86EncodeGithubComFriendsModelVendor1(out *jwriter.Writer, in Product) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"picturePath\":"
		out.RawString(prefix[1:])
		out.String(string(in.PicturePath))
	}
	{
		const prefix string = ",\"foodName\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"foodPrice\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Product) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson69b49e86EncodeGithubComFriendsModelVendor1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Product) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson69b49e86EncodeGithubComFriendsModelVendor1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Product) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson69b49e86DecodeGithubComFriendsModelVendor1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Product) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson69b49e86DecodeGithubComFriendsModelVendor1(l, v)
}
